"""
- 연결된 자료구조


:연결된 자료구조는 노드라고 하는 여러 개의 메모리 청크에 데이터를 저장하며 
이 경우 서로 다른 메모리 위치에 데이터가 저장된다. 

:연결리스트의 기본 구조에서 각각의 노드는 저장할 데이터와 다음 노드를 가리키는 포인터를 가지고 있다.
맨 마지막 노드에서는 다음 노드를 가리키는 포인터가 NULL이다.
연결 리스트에서 특정 원소에 접근하려면 리스트의 시작 부분, 즉 헤드 부분부터 시작하여 
원하는 원소에 도달할 때까지 next 포인터를 따라 이동해야 한다. 
그러므로 i번째 원소에 접근하려면 헤드부터 i번 next 포인터를 따라가야 한다.
그러므로 i번째 원소에 접근하려면 연결 리스트 내부를 i번 이동하는 작업이 필요하다. 
원소 접근 시간은 노드 개수에 비례하며, 시간 복잡도는 O(n)이다.

:연결 리스트는 포인터를 이용하여 원소의 삽입 또는 삭제를 매우 빠르게 수행할 수 있다. 

:새로운 원소를 삽입하려면 일단 새로운 노드를 생성하고, 각 노드의 next 포인터를 수정해야 한다.
먼저 새로운 추가한 노드의 next 포인터를 이전 노드의 next 포인터가 가리키는 노드로 설정한다.
그리고 이전 노드의 next 포인터를 가리키도록 설정한다. 

: 기존 원소를 제거하려면 삭제할 원소가 더 이상 연결 리스트에 연결되어 있지 않도록 next 포인터를 수정한다.

: 연결 리스트에 원소가 메모리에 연속적으로 저장되지 않기 때문에 캐시 지역성을 기대할 수 없다. 
즉, 현재 노드가 가리키는 다음 노드에 직접 방문하지 않고 다음 원소를 캐시로 가져오는 것이 불가능하다.
따라서 배열과 연결 리스트에서 모든 원소를 차례대로 방문하는 작업은 이론적으로 같은 시간 복잡도를 가지지만 
실제로는 연결 리스트가 더 느리다. 



"""